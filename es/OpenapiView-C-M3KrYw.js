import { q as e, u as v, b as I, j as b, h as A, k as c, l as W } from "./index-0DiK2-ze.js";
import { c as V, S as i, M as n, R as p, a as s, p as x, P as Y } from "./RequestBuilder-DLGbTW_q.js";
import { u as t, g as N, T as F, m as w, d as y } from "./util-DbfKY0tm.js";
var g = { TERM_PROGRAM: "vscode", NODE: "/Users/alexander/.nvm/versions/node/v16.10.0/bin/node", NVM_CD_FLAGS: "-q", INIT_CWD: "/Users/alexander/my-code/github/openapi-ui", SHELL: "/bin/zsh", TERM: "xterm-256color", TMPDIR: "/var/folders/7b/f28gh86d083_xqj9p9hs97k80000gn/T/", npm_config_metrics_registry: "https://registry.npmjs.org/", npm_config_global_prefix: "/Users/alexander/.nvm/versions/node/v16.10.0", TERM_PROGRAM_VERSION: "1.88.0", GVM_ROOT: "/Users/alexander/.gvm", MallocNanoZone: "0", ORIGINAL_XDG_CURRENT_DESKTOP: "undefined", ZDOTDIR: "/Users/alexander", COLOR: "1", npm_config_noproxy: "", ZSH: "/Users/alexander/.oh-my-zsh", PNPM_HOME: "/Users/alexander/Library/pnpm", npm_config_local_prefix: "/Users/alexander/my-code/github/openapi-ui", USER: "alexander", NVM_DIR: "/Users/alexander/.nvm", LD_LIBRARY_PATH: "/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:", COMMAND_MODE: "unix2003", npm_config_globalconfig: "/Users/alexander/.nvm/versions/node/v16.10.0/etc/npmrc", SSH_AUTH_SOCK: "/private/tmp/com.apple.launchd.jaFD8W3kId/Listeners", __CF_USER_TEXT_ENCODING: "0x1F5:0x19:0x34", npm_execpath: "/Users/alexander/.nvm/versions/node/v16.10.0/lib/node_modules/npm/bin/npm-cli.js", PAGER: "less", LSCOLORS: "Gxfxcxdxbxegedabagacad", PATH: "/Users/alexander/my-code/github/openapi-ui/node_modules/.bin:/Users/alexander/my-code/github/node_modules/.bin:/Users/alexander/my-code/node_modules/.bin:/Users/alexander/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/alexander/.nvm/versions/node/v16.10.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/opt/ruby/bin:/Users/alexander/Library/pnpm:/Users/alexander/.yarn/bin:/Users/alexander/.config/yarn/global/node_modules/.bin:/Users/alexander/.gvm/pkgsets/go1.20/global/bin:/Users/alexander/.gvm/gos/go1.20/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/bin:/Users/alexander/.gvm/bin:/Users/alexander/.gvm/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/bin:/Users/alexander/.gvm/gos/go1.20/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/bin:/Users/alexander/.gvm/bin:/Users/alexander/.gvm/bin:/Users/alexander/mygo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/ruby/bin:/Users/alexander/Library/pnpm:/Users/alexander/.yarn/bin:/Users/alexander/.config/yarn/global/node_modules/.bin:/Users/alexander/.gvm/pkgsets/go1.20/global/bin:/Users/alexander/.gvm/gos/go1.20/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/bin:/Users/alexander/.gvm/bin:/Users/alexander/.nvm/versions/node/v16.10.0/bin:/Users/alexander/.cargo/bin:/usr/local/mysql/bin:/Users/alexander/.gem/ruby/3.2.0/bin:/usr/local/mysql/bin:/Users/alexander/.gem/ruby/3.2.0/bin", npm_package_json: "/Users/alexander/my-code/github/openapi-ui/package.json", __CFBundleIdentifier: "com.microsoft.VSCode", USER_ZDOTDIR: "/Users/alexander", npm_config_auto_install_peers: "true", npm_config_init_module: "/Users/alexander/.npm-init.js", npm_config_userconfig: "/Users/alexander/.npmrc", PWD: "/Users/alexander/my-code/github/openapi-ui", GVM_VERSION: "1.0.22", npm_command: "run-script", EDITOR: "vi", npm_lifecycle_event: "build:package", LANG: "zh_CN.UTF-8", npm_package_name: "openapi-ui-dist", gvm_pkgset_name: "global", NODE_PATH: "/Users/alexander/my-code/github/openapi-ui/node_modules/.pnpm/vite@5.1.6_@types+node@20.11.21/node_modules/vite/bin/node_modules:/Users/alexander/my-code/github/openapi-ui/node_modules/.pnpm/vite@5.1.6_@types+node@20.11.21/node_modules/vite/node_modules:/Users/alexander/my-code/github/openapi-ui/node_modules/.pnpm/vite@5.1.6_@types+node@20.11.21/node_modules:/Users/alexander/my-code/github/openapi-ui/node_modules/.pnpm/node_modules", XPC_FLAGS: "0x0", VSCODE_GIT_ASKPASS_EXTRA_ARGS: "", npm_package_engines_node: "^18.0.0 || >=20.0.0", npm_config_node_gyp: "/Users/alexander/.nvm/versions/node/v16.10.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js", XPC_SERVICE_NAME: "0", npm_package_version: "2.0.0", VSCODE_INJECTION: "1", HOME: "/Users/alexander", SHLVL: "2", VSCODE_GIT_ASKPASS_MAIN: "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js", GOROOT: "/Users/alexander/.gvm/gos/go1.20", DYLD_LIBRARY_PATH: "/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib:", gvm_go_name: "go1.20", LOGNAME: "alexander", LESS: "-R", npm_config_cache: "/Users/alexander/.npm", GVM_OVERLAY_PREFIX: "/Users/alexander/.gvm/pkgsets/go1.20/global/overlay", npm_lifecycle_script: "tsc && vite build --config vite.package.config.ts --mode package", LC_CTYPE: "zh_CN.UTF-8", VSCODE_GIT_IPC_HANDLE: "/var/folders/7b/f28gh86d083_xqj9p9hs97k80000gn/T/vscode-git-14571c2f30.sock", NVM_BIN: "/Users/alexander/.nvm/versions/node/v16.10.0/bin", PKG_CONFIG_PATH: "/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib/pkgconfig:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib/pkgconfig:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib/pkgconfig:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/lib/pkgconfig:", GOPATH: "/Users/alexander/mygo", npm_config_user_agent: "npm/7.24.0 node/v16.10.0 darwin x64 workspaces/false", GIT_ASKPASS: "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh", VSCODE_GIT_ASKPASS_NODE: "/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Plugin).app/Contents/MacOS/Code Helper (Plugin)", GVM_PATH_BACKUP: "/Users/alexander/.gvm/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/bin:/Users/alexander/.gvm/gos/go1.20/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/bin:/Users/alexander/.gvm/bin:/Users/alexander/.gvm/bin:/Users/alexander/mygo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/ruby/bin:/Users/alexander/Library/pnpm:/Users/alexander/.yarn/bin:/Users/alexander/.config/yarn/global/node_modules/.bin:/Users/alexander/.gvm/pkgsets/go1.20/global/bin:/Users/alexander/.gvm/gos/go1.20/bin:/Users/alexander/.gvm/pkgsets/go1.20/global/overlay/bin:/Users/alexander/.gvm/bin:/Users/alexander/.nvm/versions/node/v16.10.0/bin:/Users/alexander/.cargo/bin:/usr/local/mysql/bin:/Users/alexander/.gem/ruby/3.2.0/bin", COLORTERM: "truecolor", npm_config_prefix: "/Users/alexander/.nvm/versions/node/v16.10.0", npm_node_execpath: "/Users/alexander/.nvm/versions/node/v16.10.0/bin/node", NODE_ENV: "production" };
function Z() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var R = g.NODE_ENV === "production" ? {
  name: "12o8wmt",
  styles: "display:inline-block;margin-left:8px"
} : {
  name: "uo55jk-OpenapiView",
  styles: "display:inline-block;margin-left:8px;label:OpenapiView;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEVjIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */",
  toString: Z
}, o = g.NODE_ENV === "production" ? {
  name: "10rtstj",
  styles: "padding:16px"
} : {
  name: "yldor9-OpenapiView",
  styles: "padding:16px;label:OpenapiView;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUZhIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */",
  toString: Z
}, h = {
  name: "1mwkkc",
  styles: "margin-left:1em"
};
function j() {
  var a;
  const {
    operationId: u
  } = e(), {
    t: l
  } = t(), {
    openapiWithServiceInfo: G
  } = v();
  if (!(G != null && G.operations) || !u)
    return null;
  const C = G.operations[u] || {}, m = C.method ? {
    color: N(C.method)
  } : {}, X = {
    color: c.color.primary
  };
  return I("div", {
    children: b("div", {
      css: /* @__PURE__ */ A({
        borderRadius: 6,
        overflow: "hidden",
        border: `1px solid ${m.color}`
      }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEJRIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */"),
      children: [b("div", {
        css: /* @__PURE__ */ A({
          backgroundColor: m.color,
          padding: 10,
          color: c.color.bg
        }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUNVIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */"),
        children: [b("div", {
          css: /* @__PURE__ */ A({
            textDecoration: C.deprecated ? "line-through" : "none",
            marginBottom: 8
          }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNENZIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */"),
          children: [I(F, {
            title: l("openapi.clickToCopy"),
            children: I("span", {
              css: /* @__PURE__ */ A({
                fontSize: c.fontSize.s,
                fontWeight: "bold",
                marginRight: 10,
                cursor: "pointer"
              }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbURnQiIsImZpbGUiOiIvVXNlcnMvYWxleGFuZGVyL215LWNvZGUvZ2l0aHViL29wZW5hcGktdWkvc3JjL29wZW5hcGkvT3BlbmFwaVZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCwgbWVzc2FnZSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgY29weSBmcm9tIFwiY29weS10by1jbGlwYm9hcmRcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uXCI7XG5pbXBvcnQgeyB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUgfSBmcm9tIFwiLi4vY29yZS9zdG9yZVwiO1xuaW1wb3J0IHsgZHNjIH0gZnJvbSBcIi4uL2NvcmUvc3R5bGUvZGVmYXVsdFN0eWxlQ29uZmlnXCI7XG5pbXBvcnQgeyBSZXNwb25zZXMgfSBmcm9tIFwiLi9PcGVuYXBpVmlld0NvbXBcIjtcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSBcIi4vUmVxdWVzdEJ1aWxkZXJcIjtcbmltcG9ydCB7IFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAsIHBhcmFtZXRlclBvc2l0aW9uTWFwIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwsIGdldE1ldGhvZENvbG9yIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPcGVuYXBpVmlldygpIHtcbiAgY29uc3QgeyBvcGVyYXRpb25JZCB9ID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvIH0gPSB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUoKTtcblxuICBpZiAoIW9wZW5hcGlXaXRoU2VydmljZUluZm8/Lm9wZXJhdGlvbnMgfHwgIW9wZXJhdGlvbklkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBvcGVyYXRpb24gPSBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZXJhdGlvbnNbb3BlcmF0aW9uSWRdIHx8IHt9O1xuICBjb25zdCBtZXRob2RTdHlsZSA9IG9wZXJhdGlvbi5tZXRob2QgPyB7IGNvbG9yOiBnZXRNZXRob2RDb2xvcihvcGVyYXRpb24ubWV0aG9kKSB9IDoge307XG4gIGNvbnN0IGNvbW1vbkNvbG9yU3R5bGUgPSB7IGNvbG9yOiBkc2MuY29sb3IucHJpbWFyeSB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke21ldGhvZFN0eWxlLmNvbG9yfWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0aG9kU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IuYmcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogb3BlcmF0aW9uLmRlcHJlY2F0ZWQgPyBcImxpbmUtdGhyb3VnaFwiIDogXCJub25lXCIsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e3QoXCJvcGVuYXBpLmNsaWNrVG9Db3B5XCIpfT5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvcHkob3BlcmF0aW9uLm9wZXJhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2Vzcyh0KFwib3BlbmFwaS5jb3B5U3VjY2Vzc1wiKSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtvcGVyYXRpb24ub3BlcmF0aW9uSWR9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgIDxzcGFuIHRpdGxlPXtvcGVyYXRpb24uc3VtbWFyeX0gY3NzPXt7IGZvbnRTaXplOiBkc2MuZm9udFNpemUueHhzIH19PlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnN1bW1hcnl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7IHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsIGZvbnRGYW1pbHk6IGRzYy5mb250RmFtaWx5Lm1vbm8gfX0+e29wZXJhdGlvbi5tZXRob2R9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnBhdGh9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyBwYWRkaW5nOiAxNiB9fT5cbiAgICAgICAgICB7b3BlcmF0aW9uLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5kZXNjcmlwdGlvblwiKX08L3NwYW4+fT5cbiAgICAgICAgICAgICAgPFJlYWN0TWFya2Rvd24+e29wZXJhdGlvbi5kZXNjcmlwdGlvbn08L1JlYWN0TWFya2Rvd24+XG4gICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8U2VjdGlvblxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5wYXJhbWV0ZXJzXCIpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c21hbGxcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjAuOGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogZHNjLmNvbG9yLnRleHQsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHttYXAocGFyYW1ldGVyUG9zaXRpb25NYXAsIChsYWJlbCwgcG9zaXRpb24pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Bvc2l0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAgcG9zaXRpb249e3Bvc2l0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UmVxdWVzdEJ1aWxkZXJcbiAgICAgICAgICAgICAgc2NoZW1hcz17b3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5vcGVuYXBpLmNvbXBvbmVudHM/LnNjaGVtYXMgfHwge319XG4gICAgICAgICAgICAgIG9wZXJhdGlvbj17e1xuICAgICAgICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICBiYXNlUGF0aDogZ2V0QXhpb3NCYXNlUGF0aEJ5VXJsKG9wZW5hcGlXaXRoU2VydmljZUluZm8uc2VydmljZVVSTCksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICA8U2VjdGlvbiB0aXRsZT17PHNwYW4gY3NzPXtjb21tb25Db2xvclN0eWxlfT57dChcIm9wZW5hcGkucmVzcG9uc2VzXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgPFJlc3BvbnNlcyBvcGVyYXRpb249e29wZXJhdGlvbn0gLz5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0= */"),
              onClick: () => {
                V(C.operationId), w.success(l("openapi.copySuccess"));
              },
              children: C.operationId
            })
          }), I("span", {
            title: C.summary,
            css: /* @__PURE__ */ A({
              fontSize: c.fontSize.xxs
            }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUU0QyIsImZpbGUiOiIvVXNlcnMvYWxleGFuZGVyL215LWNvZGUvZ2l0aHViL29wZW5hcGktdWkvc3JjL29wZW5hcGkvT3BlbmFwaVZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCwgbWVzc2FnZSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgY29weSBmcm9tIFwiY29weS10by1jbGlwYm9hcmRcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uXCI7XG5pbXBvcnQgeyB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUgfSBmcm9tIFwiLi4vY29yZS9zdG9yZVwiO1xuaW1wb3J0IHsgZHNjIH0gZnJvbSBcIi4uL2NvcmUvc3R5bGUvZGVmYXVsdFN0eWxlQ29uZmlnXCI7XG5pbXBvcnQgeyBSZXNwb25zZXMgfSBmcm9tIFwiLi9PcGVuYXBpVmlld0NvbXBcIjtcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSBcIi4vUmVxdWVzdEJ1aWxkZXJcIjtcbmltcG9ydCB7IFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAsIHBhcmFtZXRlclBvc2l0aW9uTWFwIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwsIGdldE1ldGhvZENvbG9yIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPcGVuYXBpVmlldygpIHtcbiAgY29uc3QgeyBvcGVyYXRpb25JZCB9ID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvIH0gPSB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUoKTtcblxuICBpZiAoIW9wZW5hcGlXaXRoU2VydmljZUluZm8/Lm9wZXJhdGlvbnMgfHwgIW9wZXJhdGlvbklkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBvcGVyYXRpb24gPSBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZXJhdGlvbnNbb3BlcmF0aW9uSWRdIHx8IHt9O1xuICBjb25zdCBtZXRob2RTdHlsZSA9IG9wZXJhdGlvbi5tZXRob2QgPyB7IGNvbG9yOiBnZXRNZXRob2RDb2xvcihvcGVyYXRpb24ubWV0aG9kKSB9IDoge307XG4gIGNvbnN0IGNvbW1vbkNvbG9yU3R5bGUgPSB7IGNvbG9yOiBkc2MuY29sb3IucHJpbWFyeSB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke21ldGhvZFN0eWxlLmNvbG9yfWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0aG9kU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IuYmcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogb3BlcmF0aW9uLmRlcHJlY2F0ZWQgPyBcImxpbmUtdGhyb3VnaFwiIDogXCJub25lXCIsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e3QoXCJvcGVuYXBpLmNsaWNrVG9Db3B5XCIpfT5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvcHkob3BlcmF0aW9uLm9wZXJhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2Vzcyh0KFwib3BlbmFwaS5jb3B5U3VjY2Vzc1wiKSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtvcGVyYXRpb24ub3BlcmF0aW9uSWR9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgIDxzcGFuIHRpdGxlPXtvcGVyYXRpb24uc3VtbWFyeX0gY3NzPXt7IGZvbnRTaXplOiBkc2MuZm9udFNpemUueHhzIH19PlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnN1bW1hcnl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7IHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsIGZvbnRGYW1pbHk6IGRzYy5mb250RmFtaWx5Lm1vbm8gfX0+e29wZXJhdGlvbi5tZXRob2R9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnBhdGh9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyBwYWRkaW5nOiAxNiB9fT5cbiAgICAgICAgICB7b3BlcmF0aW9uLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5kZXNjcmlwdGlvblwiKX08L3NwYW4+fT5cbiAgICAgICAgICAgICAgPFJlYWN0TWFya2Rvd24+e29wZXJhdGlvbi5kZXNjcmlwdGlvbn08L1JlYWN0TWFya2Rvd24+XG4gICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8U2VjdGlvblxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5wYXJhbWV0ZXJzXCIpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c21hbGxcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjAuOGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogZHNjLmNvbG9yLnRleHQsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHttYXAocGFyYW1ldGVyUG9zaXRpb25NYXAsIChsYWJlbCwgcG9zaXRpb24pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Bvc2l0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAgcG9zaXRpb249e3Bvc2l0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UmVxdWVzdEJ1aWxkZXJcbiAgICAgICAgICAgICAgc2NoZW1hcz17b3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5vcGVuYXBpLmNvbXBvbmVudHM/LnNjaGVtYXMgfHwge319XG4gICAgICAgICAgICAgIG9wZXJhdGlvbj17e1xuICAgICAgICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICBiYXNlUGF0aDogZ2V0QXhpb3NCYXNlUGF0aEJ5VXJsKG9wZW5hcGlXaXRoU2VydmljZUluZm8uc2VydmljZVVSTCksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICA8U2VjdGlvbiB0aXRsZT17PHNwYW4gY3NzPXtjb21tb25Db2xvclN0eWxlfT57dChcIm9wZW5hcGkucmVzcG9uc2VzXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgPFJlc3BvbnNlcyBvcGVyYXRpb249e29wZXJhdGlvbn0gLz5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0= */"),
            children: C.summary
          })]
        }), b("div", {
          css: /* @__PURE__ */ A({
            fontSize: c.fontSize.s
          }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0VZIiwiZmlsZSI6Ii9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sdGlwLCBtZXNzYWdlIH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCBjb3B5IGZyb20gXCJjb3B5LXRvLWNsaXBib2FyZFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcbmltcG9ydCB7IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSB9IGZyb20gXCIuLi9jb3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBkc2MgfSBmcm9tIFwiLi4vY29yZS9zdHlsZS9kZWZhdWx0U3R5bGVDb25maWdcIjtcbmltcG9ydCB7IFJlc3BvbnNlcyB9IGZyb20gXCIuL09wZW5hcGlWaWV3Q29tcFwiO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tIFwiLi9SZXF1ZXN0QnVpbGRlclwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCwgcGFyYW1ldGVyUG9zaXRpb25NYXAgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldEF4aW9zQmFzZVBhdGhCeVVybCwgZ2V0TWV0aG9kQ29sb3IgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9wZW5hcGlWaWV3KCkge1xuICBjb25zdCB7IG9wZXJhdGlvbklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IG9wZW5hcGlXaXRoU2VydmljZUluZm8gfSA9IHVzZU9wZW5hcGlXaXRoU2VydmljZUluZm9TdG9yZSgpO1xuXG4gIGlmICghb3BlbmFwaVdpdGhTZXJ2aWNlSW5mbz8ub3BlcmF0aW9ucyB8fCAhb3BlcmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvbiA9IG9wZW5hcGlXaXRoU2VydmljZUluZm8ub3BlcmF0aW9uc1tvcGVyYXRpb25JZF0gfHwge307XG4gIGNvbnN0IG1ldGhvZFN0eWxlID0gb3BlcmF0aW9uLm1ldGhvZCA/IHsgY29sb3I6IGdldE1ldGhvZENvbG9yKG9wZXJhdGlvbi5tZXRob2QpIH0gOiB7fTtcbiAgY29uc3QgY29tbW9uQ29sb3JTdHlsZSA9IHsgY29sb3I6IGRzYy5jb2xvci5wcmltYXJ5IH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7bWV0aG9kU3R5bGUuY29sb3J9YCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRob2RTdHlsZS5jb2xvcixcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgY29sb3I6IGRzYy5jb2xvci5iZyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBvcGVyYXRpb24uZGVwcmVjYXRlZCA/IFwibGluZS10aHJvdWdoXCIgOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dChcIm9wZW5hcGkuY2xpY2tUb0NvcHlcIil9PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29weShvcGVyYXRpb24ub3BlcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHQoXCJvcGVuYXBpLmNvcHlTdWNjZXNzXCIpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wZXJhdGlvbi5vcGVyYXRpb25JZH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPHNwYW4gdGl0bGU9e29wZXJhdGlvbi5zdW1tYXJ5fSBjc3M9e3sgZm9udFNpemU6IGRzYy5mb250U2l6ZS54eHMgfX0+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24uc3VtbWFyeX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgZm9udFNpemU6IGRzYy5mb250U2l6ZS5zLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e3sgdGV4dFRyYW5zZm9ybTogXCJ1cHBlcmNhc2VcIiwgZm9udEZhbWlseTogZHNjLmZvbnRGYW1pbHkubW9ubyB9fT57b3BlcmF0aW9uLm1ldGhvZH08L3NwYW4+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcGVyYXRpb24ucGF0aH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDE2IH19PlxuICAgICAgICAgIHtvcGVyYXRpb24uZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFNlY3Rpb24gdGl0bGU9ezxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLmRlc2NyaXB0aW9uXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgICA8UmVhY3RNYXJrZG93bj57b3BlcmF0aW9uLmRlc2NyaXB0aW9ufTwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTZWN0aW9uXG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17Y29tbW9uQ29sb3JTdHlsZX0+e3QoXCJvcGVuYXBpLnBhcmFtZXRlcnNcIil9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzbWFsbFxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBcIjAuNWVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IudGV4dCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge21hcChwYXJhbWV0ZXJQb3NpdGlvbk1hcCwgKGxhYmVsLCBwb3NpdGlvbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17cG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjFlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8UGFyYW1ldGVyUG9zaXRpb25JY29uQ29tcCBwb3NpdGlvbj17cG9zaXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXF1ZXN0QnVpbGRlclxuICAgICAgICAgICAgICBzY2hlbWFzPXtvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZW5hcGkuY29tcG9uZW50cz8uc2NoZW1hcyB8fCB7fX1cbiAgICAgICAgICAgICAgb3BlcmF0aW9uPXt7XG4gICAgICAgICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGJhc2VQYXRoOiBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwob3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5zZXJ2aWNlVVJMKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5yZXNwb25zZXNcIil9PC9zcGFuPn0+XG4gICAgICAgICAgICA8UmVzcG9uc2VzIG9wZXJhdGlvbj17b3BlcmF0aW9ufSAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */"),
          children: [I("span", {
            css: /* @__PURE__ */ A({
              textTransform: "uppercase",
              fontFamily: c.fontFamily.mono
            }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVrQiIsImZpbGUiOiIvVXNlcnMvYWxleGFuZGVyL215LWNvZGUvZ2l0aHViL29wZW5hcGktdWkvc3JjL29wZW5hcGkvT3BlbmFwaVZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCwgbWVzc2FnZSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgY29weSBmcm9tIFwiY29weS10by1jbGlwYm9hcmRcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uXCI7XG5pbXBvcnQgeyB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUgfSBmcm9tIFwiLi4vY29yZS9zdG9yZVwiO1xuaW1wb3J0IHsgZHNjIH0gZnJvbSBcIi4uL2NvcmUvc3R5bGUvZGVmYXVsdFN0eWxlQ29uZmlnXCI7XG5pbXBvcnQgeyBSZXNwb25zZXMgfSBmcm9tIFwiLi9PcGVuYXBpVmlld0NvbXBcIjtcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSBcIi4vUmVxdWVzdEJ1aWxkZXJcIjtcbmltcG9ydCB7IFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAsIHBhcmFtZXRlclBvc2l0aW9uTWFwIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwsIGdldE1ldGhvZENvbG9yIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPcGVuYXBpVmlldygpIHtcbiAgY29uc3QgeyBvcGVyYXRpb25JZCB9ID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvIH0gPSB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUoKTtcblxuICBpZiAoIW9wZW5hcGlXaXRoU2VydmljZUluZm8/Lm9wZXJhdGlvbnMgfHwgIW9wZXJhdGlvbklkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBvcGVyYXRpb24gPSBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZXJhdGlvbnNbb3BlcmF0aW9uSWRdIHx8IHt9O1xuICBjb25zdCBtZXRob2RTdHlsZSA9IG9wZXJhdGlvbi5tZXRob2QgPyB7IGNvbG9yOiBnZXRNZXRob2RDb2xvcihvcGVyYXRpb24ubWV0aG9kKSB9IDoge307XG4gIGNvbnN0IGNvbW1vbkNvbG9yU3R5bGUgPSB7IGNvbG9yOiBkc2MuY29sb3IucHJpbWFyeSB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke21ldGhvZFN0eWxlLmNvbG9yfWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0aG9kU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IuYmcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogb3BlcmF0aW9uLmRlcHJlY2F0ZWQgPyBcImxpbmUtdGhyb3VnaFwiIDogXCJub25lXCIsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e3QoXCJvcGVuYXBpLmNsaWNrVG9Db3B5XCIpfT5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvcHkob3BlcmF0aW9uLm9wZXJhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2Vzcyh0KFwib3BlbmFwaS5jb3B5U3VjY2Vzc1wiKSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtvcGVyYXRpb24ub3BlcmF0aW9uSWR9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgIDxzcGFuIHRpdGxlPXtvcGVyYXRpb24uc3VtbWFyeX0gY3NzPXt7IGZvbnRTaXplOiBkc2MuZm9udFNpemUueHhzIH19PlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnN1bW1hcnl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7IHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsIGZvbnRGYW1pbHk6IGRzYy5mb250RmFtaWx5Lm1vbm8gfX0+e29wZXJhdGlvbi5tZXRob2R9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnBhdGh9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyBwYWRkaW5nOiAxNiB9fT5cbiAgICAgICAgICB7b3BlcmF0aW9uLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5kZXNjcmlwdGlvblwiKX08L3NwYW4+fT5cbiAgICAgICAgICAgICAgPFJlYWN0TWFya2Rvd24+e29wZXJhdGlvbi5kZXNjcmlwdGlvbn08L1JlYWN0TWFya2Rvd24+XG4gICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8U2VjdGlvblxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5wYXJhbWV0ZXJzXCIpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c21hbGxcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjAuOGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogZHNjLmNvbG9yLnRleHQsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHttYXAocGFyYW1ldGVyUG9zaXRpb25NYXAsIChsYWJlbCwgcG9zaXRpb24pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Bvc2l0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAgcG9zaXRpb249e3Bvc2l0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UmVxdWVzdEJ1aWxkZXJcbiAgICAgICAgICAgICAgc2NoZW1hcz17b3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5vcGVuYXBpLmNvbXBvbmVudHM/LnNjaGVtYXMgfHwge319XG4gICAgICAgICAgICAgIG9wZXJhdGlvbj17e1xuICAgICAgICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICBiYXNlUGF0aDogZ2V0QXhpb3NCYXNlUGF0aEJ5VXJsKG9wZW5hcGlXaXRoU2VydmljZUluZm8uc2VydmljZVVSTCksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICA8U2VjdGlvbiB0aXRsZT17PHNwYW4gY3NzPXtjb21tb25Db2xvclN0eWxlfT57dChcIm9wZW5hcGkucmVzcG9uc2VzXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgPFJlc3BvbnNlcyBvcGVyYXRpb249e29wZXJhdGlvbn0gLz5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0= */"),
            children: C.method
          }), I("span", {
            css: R,
            children: C.path
          })]
        })]
      }), b("div", {
        css: o,
        children: [C.description && I(i, {
          title: I("span", {
            css: X,
            children: l("openapi.description")
          }),
          children: I(n, {
            children: C.description
          })
        }), I(i, {
          title: b("span", {
            children: [I("span", {
              css: X,
              children: l("openapi.parameters")
            }), I("small", {
              css: /* @__PURE__ */ A({
                lineHeight: 1.4,
                fontSize: "0.8em",
                marginBottom: "0.5em",
                color: c.color.text
              }, g.NODE_ENV === "production" ? "" : ";label:OpenapiView;", g.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGV4YW5kZXIvbXktY29kZS9naXRodWIvb3BlbmFwaS11aS9zcmMvb3BlbmFwaS9PcGVuYXBpVmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0drQiIsImZpbGUiOiIvVXNlcnMvYWxleGFuZGVyL215LWNvZGUvZ2l0aHViL29wZW5hcGktdWkvc3JjL29wZW5hcGkvT3BlbmFwaVZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9vbHRpcCwgbWVzc2FnZSB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgY29weSBmcm9tIFwiY29weS10by1jbGlwYm9hcmRcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uXCI7XG5pbXBvcnQgeyB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUgfSBmcm9tIFwiLi4vY29yZS9zdG9yZVwiO1xuaW1wb3J0IHsgZHNjIH0gZnJvbSBcIi4uL2NvcmUvc3R5bGUvZGVmYXVsdFN0eWxlQ29uZmlnXCI7XG5pbXBvcnQgeyBSZXNwb25zZXMgfSBmcm9tIFwiLi9PcGVuYXBpVmlld0NvbXBcIjtcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSBcIi4vUmVxdWVzdEJ1aWxkZXJcIjtcbmltcG9ydCB7IFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAsIHBhcmFtZXRlclBvc2l0aW9uTWFwIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBnZXRBeGlvc0Jhc2VQYXRoQnlVcmwsIGdldE1ldGhvZENvbG9yIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPcGVuYXBpVmlldygpIHtcbiAgY29uc3QgeyBvcGVyYXRpb25JZCB9ID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvIH0gPSB1c2VPcGVuYXBpV2l0aFNlcnZpY2VJbmZvU3RvcmUoKTtcblxuICBpZiAoIW9wZW5hcGlXaXRoU2VydmljZUluZm8/Lm9wZXJhdGlvbnMgfHwgIW9wZXJhdGlvbklkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBvcGVyYXRpb24gPSBvcGVuYXBpV2l0aFNlcnZpY2VJbmZvLm9wZXJhdGlvbnNbb3BlcmF0aW9uSWRdIHx8IHt9O1xuICBjb25zdCBtZXRob2RTdHlsZSA9IG9wZXJhdGlvbi5tZXRob2QgPyB7IGNvbG9yOiBnZXRNZXRob2RDb2xvcihvcGVyYXRpb24ubWV0aG9kKSB9IDoge307XG4gIGNvbnN0IGNvbW1vbkNvbG9yU3R5bGUgPSB7IGNvbG9yOiBkc2MuY29sb3IucHJpbWFyeSB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke21ldGhvZFN0eWxlLmNvbG9yfWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0aG9kU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGNvbG9yOiBkc2MuY29sb3IuYmcsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogb3BlcmF0aW9uLmRlcHJlY2F0ZWQgPyBcImxpbmUtdGhyb3VnaFwiIDogXCJub25lXCIsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e3QoXCJvcGVuYXBpLmNsaWNrVG9Db3B5XCIpfT5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvcHkob3BlcmF0aW9uLm9wZXJhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3VjY2Vzcyh0KFwib3BlbmFwaS5jb3B5U3VjY2Vzc1wiKSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtvcGVyYXRpb24ub3BlcmF0aW9uSWR9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgIDxzcGFuIHRpdGxlPXtvcGVyYXRpb24uc3VtbWFyeX0gY3NzPXt7IGZvbnRTaXplOiBkc2MuZm9udFNpemUueHhzIH19PlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnN1bW1hcnl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiBkc2MuZm9udFNpemUucyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7IHRleHRUcmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsIGZvbnRGYW1pbHk6IGRzYy5mb250RmFtaWx5Lm1vbm8gfX0+e29wZXJhdGlvbi5tZXRob2R9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7b3BlcmF0aW9uLnBhdGh9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyBwYWRkaW5nOiAxNiB9fT5cbiAgICAgICAgICB7b3BlcmF0aW9uLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPXs8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5kZXNjcmlwdGlvblwiKX08L3NwYW4+fT5cbiAgICAgICAgICAgICAgPFJlYWN0TWFya2Rvd24+e29wZXJhdGlvbi5kZXNjcmlwdGlvbn08L1JlYWN0TWFya2Rvd24+XG4gICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8U2VjdGlvblxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e2NvbW1vbkNvbG9yU3R5bGV9Pnt0KFwib3BlbmFwaS5wYXJhbWV0ZXJzXCIpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c21hbGxcbiAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjAuOGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogZHNjLmNvbG9yLnRleHQsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHttYXAocGFyYW1ldGVyUG9zaXRpb25NYXAsIChsYWJlbCwgcG9zaXRpb24pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Bvc2l0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFBhcmFtZXRlclBvc2l0aW9uSWNvbkNvbXAgcG9zaXRpb249e3Bvc2l0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UmVxdWVzdEJ1aWxkZXJcbiAgICAgICAgICAgICAgc2NoZW1hcz17b3BlbmFwaVdpdGhTZXJ2aWNlSW5mby5vcGVuYXBpLmNvbXBvbmVudHM/LnNjaGVtYXMgfHwge319XG4gICAgICAgICAgICAgIG9wZXJhdGlvbj17e1xuICAgICAgICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICBiYXNlUGF0aDogZ2V0QXhpb3NCYXNlUGF0aEJ5VXJsKG9wZW5hcGlXaXRoU2VydmljZUluZm8uc2VydmljZVVSTCksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICA8U2VjdGlvbiB0aXRsZT17PHNwYW4gY3NzPXtjb21tb25Db2xvclN0eWxlfT57dChcIm9wZW5hcGkucmVzcG9uc2VzXCIpfTwvc3Bhbj59PlxuICAgICAgICAgICAgPFJlc3BvbnNlcyBvcGVyYXRpb249e29wZXJhdGlvbn0gLz5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0= */"),
              children: W(x, (B, d) => b("span", {
                css: h,
                children: [I(Y, {
                  position: d
                }), I("span", {
                  children: B
                })]
              }, d))
            })]
          }),
          children: I(p, {
            schemas: ((a = G.openapi.components) == null ? void 0 : a.schemas) || {},
            operation: {
              ...C,
              basePath: y(G.serviceURL)
            }
          })
        }), I(i, {
          title: I("span", {
            css: X,
            children: l("openapi.responses")
          }),
          children: I(s, {
            operation: C
          })
        })]
      })]
    })
  });
}
export {
  j as default
};
